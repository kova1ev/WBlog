@page "/admin/Tags/TagsList"
@page "/admin/Tags"
@using Helpers
@* @inject IJSRuntime JsRuntime *@

<SideMenu></SideMenu>
<div class="col-lg-10">
    @if (Message != null)
    {
        <span>@Message</span>
    }
    <h2>Теги</h2>
    <div class="d-flex">
        <input class="form-control me-2" type="text" placeholder="Поиск" @bind="@SerchString" @bind:event="oninput"
            @onkeydown="KeyPush">
        <button class="btn btn-outline-success" type="button" @onclick="@(async()=>await GetFiltredTags())">
            Поиск
        </button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th class="col-10" scope="col">Название</th>
                <th class="col-2 text-center" scope="col">Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in TagsData?.Data ?? Enumerable.Empty<TagModel>())
            {
                <tr class="post">
                    @* <td><a>@item.Name</a> </td> *@
                    <td><input value="@item.Name" /> </td>
                    <td class="d-flex justify-content-end">
                        <button class="btn btn-sm btn-primary me-1" type="button">Редактировать</button>
                        <button class="btn btn-sm btn-danger" type="button"
                        @onclick="@(()=>Delete(item.Id))">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <PagesBar Parametrs="@PageParametrs" OnClickCallback="@GetFiltredTags"></PagesBar>
</div>

@code {
    public string? Message { get; set; }
    [Inject]
    public IBlogClient? BlogClient { get; set; }
    [Inject]
    public IJSRuntime? JsRuntime { get; set; }

    public FiltredDataModel<TagModel>? TagsData { get; set; }
    public PageParametrs PageParametrs { get; set; } = new PageParametrs();

    public string? SerchString { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await GetFiltredTags();
    }

    private async Task GetFiltredTags(int page = 1)
    {
        PageParametrs.CurrentPage = page;
        var urlString = UrlBuilder.Tag.GetAllTagsByParametr(PageParametrs, SerchString);


        if (BlogClient != null)
        {
            TagsData = await
            BlogClient.GetAsync<FiltredDataModel<TagModel>>(urlString);
            PageParametrs.TotalItems = TagsData.TotalItems;
            System.Console.WriteLine("--->" + urlString);
        }
    }

    private async Task KeyPush(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await GetFiltredTags();
        }
    }

    private async Task Delete(Guid id)
    {
        bool result = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (result)
        {
            System.Console.WriteLine("try");
            if (BlogClient != null)
            {
                var response = await BlogClient.DeleteAsync($"/api/Tag/{id}");

                System.Console.WriteLine($"/api/Tag/{id}");
                if (response)
                {
                    Message = "tag deleted";
                }
                await GetFiltredTags();
            }

        }
        else
        {
            System.Console.WriteLine("NO");
        }
    }
}
