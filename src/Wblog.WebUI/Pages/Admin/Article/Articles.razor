@page "/admin/Articles"
@* @page "/admin/Articles/{Page:int?}" *@

<SideMenu></SideMenu>
<div class="col-lg-10">
    <div>
        <h2>Статьи</h2>
        <form class="d-flex">
            <input class="form-control me-2 " type="text" placeholder="Поиск" name="serch">
            <button class="btn btn-outline-success" type="submit">Поиск</button>
        </form>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th class="col-10" scope="col">Название</th>
                <th class="col" scope="col">Опубликовано</th>
                <th class="col" scope="col">Дата @SortArrowHtml()</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in PostsData?.Data ?? Enumerable.Empty<PostIndexModel>())
            {
                <tr class="post">
                    <td> <a href="/admin/Article/Preview">@post.Title</a> </td>
                    <td class="text-center @PublishCssColor(post.IsPublished)">@Publish(post.IsPublished)</td>
                    <td>@post.DateCreated.ToShortDateString()</td>
                </tr>
            }

        </tbody>
    </table>

    <PagesBar Parametrs="@PageParametrs" OnClickCallback="@GetFiltredPosts"></PagesBar>
</div>

@code {
    [Inject]
    public IBlogClient? BlogClient { get; set; }

    public FiltredPostsModel? PostsData { get; set; }
    public PageParametrs PageParametrs { get; set; } =new PageParametrs();
    public string DateState { get; set; } = "DateDesc";

    protected override async Task OnInitializedAsync()
    {
        await GetFiltredPosts(PageParametrs.CurrentPage);
    }

    private async Task GetFiltredPosts(int page)
    {
        PageParametrs.CurrentPage = page;
        PageParametrs.ItemPerPage=5;

        int offset = (PageParametrs.CurrentPage - 1) * PageParametrs.ItemPerPage;
        if (BlogClient != null)
        {
            PostsData = await BlogClient.GetAsync<FiltredPostsModel>($"/api/post?limit={PageParametrs.ItemPerPage}&offset={offset}&State={DateState}");
            PageParametrs.TotalItems = PostsData.TotalItems;
        }
    }


    private RenderFragment SortArrowHtml()
    {
        if (DateState == "DateDesc")
        {
            return
    @<i class="bi bi-caret-down-fill c-pointer" @onclick="@SortByDataClick"></i>
    ;
        }
        else
        {
            return
    @<i class="bi bi-caret-up-fill c-pointer" @onclick="@SortByDataClick"></i>
    ;
        }
    }

    async Task SortByDataClick()
    {
        if (DateState == "DateDesc")
        {
            DateState = "DateAsc";
        }
        else
        {
            DateState = "DateDesc";
        }
        await GetFiltredPosts(PageParametrs.CurrentPage);
    }

    @* Publish *@
    private string Publish(bool isPublished)
    {
        return isPublished ? "Yes" : "No";
    }
    private string PublishCssColor(bool isPublished)
    {
        return isPublished ? "text-success" : "text-danger";
    }
}
