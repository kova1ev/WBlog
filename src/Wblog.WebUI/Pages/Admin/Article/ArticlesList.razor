@page "/admin/Articles"
@page "/admin/Articles/{Page:int?}"

<SideMenu></SideMenu>
<div class="col-lg-10">
    <div>
        <h2>Статьи</h2>
        <form class="d-flex">
            <input class="form-control me-2 " type="text" placeholder="Поиск" name="serch">
            <button class="btn btn-outline-success" type="submit">Поиск</button>
        </form>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th class="col-10" scope="col">Название</th>
                <th class="col" scope="col">Опубликовано</th>
                <th class="col" scope="col">Дата</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in PostsData?.Data ?? Enumerable.Empty<PostIndexModel>())
            {
                <tr class="post">
                    <td> <a href="/admin/Article/Preview">@post.Title</a> </td>
                    <td class="text-center @PublishCssColor(post.IsPublished)">@Publish(post.IsPublished)</td>
                    <td>@post.DateCreated.ToShortDateString()</td>
                </tr>
            }

        </tbody>
    </table>
    <hr>
    <PagesBar Parametrs=@PageParametrs></PagesBar>
</div>


@code {
    [Inject]
    public IBlogClient? BlogClient { get; set; }

    public FiltredPostsModel? PostsData { get; set; }
    public PageParametrs? PageParametrs { get; set; }

    [Parameter]
    public int Page { get; set; }

    protected override async Task OnInitializedAsync()
    {

        PageParametrs = new PageParametrs()
        {
            CurrentPage = Page <= 0 ? 1 : Page,
            ItemPerPage = 5,
        };

        int limit = PageParametrs.ItemPerPage;
        int offset = (Page - 1) * limit;//PageParametrs.ItemPerPage;

        if (BlogClient != null)
        {
            PostsData = await GetFiltredPosts(limit, offset);
            PageParametrs.TotalItems = PostsData.TotalItems;
        }

    }

    private async Task<FiltredPostsModel> GetFiltredPosts(int limit, int offset)
    {
        return await BlogClient.GetAsync<FiltredPostsModel>($"/api/post?limit={limit}&offset={offset}");
    }




    @* Publish *@
    private string Publish(bool isPublished)
    {
        return isPublished ? "Yes" : "No";
    }
    private string PublishCssColor(bool isPublished)
    {
        return isPublished ? "text-success" : "text-danger";
    }
}
