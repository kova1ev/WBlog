@page "/admin/Article/{slug}"
@inject NavigationManager NavigationManager

<div class="d-flex col-lg-9 justify-content-evenly pb-2">
    <button type="button" class="btn btn-md btn-outline-primary">Редактировать </button>
    <button type="button" class="btn btn-md btn-outline-success" @onclick="PublishedArticle">Опубликовать</button>
    <button type="button" class="btn btn-md btn-outline-danger" @onclick="DeleteArticle">Удалить </button>
</div>
<hr>
<div class="content col-lg-9 justify-content-center">
    @if (Message != null)
    {
        <span class="fs-5 text-success">@Message</span>
    }
</div>
<div class="content col-lg-9 justify-content-center">
    <h2>@Slug</h2>
    @if (Post != null)
    {
        <h1>@Post.Title</h1>
        <em>@Post.Id</em>
        <em>@Post.DateCreated</em>
        <br>
        <h1>@Post.Content</h1>
        <br />
        <hr>
        <div class="tags c-pointer">
            @foreach (var tag in Post.Tags ?? Enumerable.Empty<string>())
            {
                <span class="badge bg-success position-relative p-2 me-2 mb-1">@tag</span>
            }
        </div>
    }
</div>

@code {
    string? Message { get; set; }
    [Inject]
    public IBlogClient? BlogClient { get; set; }
    [Parameter]
    public string Slug { get; set; }

    public PostDetailsModel? Post { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await GetArticle();
    }

    private async Task GetArticle()
    {
        if (BlogClient != null)
        {
            Post = await BlogClient.GetAsync<PostDetailsModel>($"/api/post/{Slug}");
        }
    }

    private async Task PublishedArticle()
    {
        bool published = true;
        if (Post.IsPublished == false)
        {
            published = true;
            Message = "Статья Опубликована";
        }
        else
        {
            published = false;
            Message = "Статья Отозвана";
        }
        if (BlogClient != null)
        {
            var result = await BlogClient.PublishAsync($"/api/post/{Post.Id}/publish?publish={published}");
            await GetArticle();
        }
    }

    private async Task DeleteArticle()
    {
        if (BlogClient != null)
        {
            var result = await BlogClient.DeleteAsync($"/api/post/{Post.Id}");
        }
        NavigationManager.NavigateTo("/admin/Articles");
    }

}
