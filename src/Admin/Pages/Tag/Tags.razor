@page "/Tags"
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject ITagService TagService

<NavMenu></NavMenu>
<div class="col-lg-10">
    @if (Message != null)
    {
        <span class="text-danger">@Message</span>
    }
    <h2>Теги</h2>
    <div class="d-flex">
        <input class="form-control me-2" type="text" placeholder="Поиск" @bind="@SerchString" @bind:event="oninput"
               @onkeydown="KeyPush">
        <button class="btn btn-outline-success" type="button" @onclick="@(async () => await GetFiltredTags())">
            Поиск
        </button>
    </div>
    <table class="table">
        <thead>
        <tr>
            <th class="col-10" scope="col">Название</th>
            <th class="col-2 text-center" scope="col">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in TagsData.Data )
        {
            <tr class="post">
                <td>
                    <span class="text-body fw-normal">@item.Name</span>
                </td>
                <td class="d-flex justify-content-end">
                    <button class="btn btn-sm btn-primary me-1" type="button"
                            @onclick="@(() => GotoEdit(item.Id))">
                        Редактировать
                    </button>
                    <button class="btn btn-sm btn-danger" type="button"
                            @onclick="@(() => Delete(item.Id))">
                        Удалить
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <PageBar PageParam="@PageParametrs" OnClickCallback="@GetFiltredTags"></PageBar>
</div>

@code {
    private string? Message { get; set; }

    public FiltredData<TagViewModel> TagsData { get; set; } = new();
    public PageParametrs PageParametrs { get; set; } = new ();
    public string? SerchString { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await GetFiltredTags();
    }

    private async Task GetFiltredTags(int page = 1)
    {
        PageParametrs.CurrentPage = page;
        PageParametrs.ItemPerPage = 5;

        TagRequestOptions tagRequestOptions = new()
        {
            Limit = PageParametrs.ItemPerPage,
            OffSet = (PageParametrs.CurrentPage - 1) * PageParametrs.ItemPerPage,
            Query = SerchString
        };
        try
        {
            var tags = await TagService.GetTags(tagRequestOptions);

            TagsData.Data  = tags.Data.Select(t => new TagViewModel(t));
            PageParametrs.TotalItems = tags.TotalItems;
        }
        catch (HttpRequestException ex)
        {
            Message = ex.Message;
        }
    }

    private async Task KeyPush(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await GetFiltredTags();
        }
    }

    private async Task Delete(Guid id)
    {
        var result = await DialogService.OpenAsync("Подтвердите действие.", ds =>
            @<div>
                <p class="fw-bolder">Вы дейтвительно хотите удалить данный тег?</p>
                <div class="row">
                    <div class="col-sm-12 justify-content-between d-flex">
                        <button class="btn btn-md btn-danger" type="button" @onclick="() => ds.Close(true)">Подтвердить</button>
                        <button class="btn btn-md btn-primary" type="button" @onclick="() => ds.Close(false)">Отмена</button>
                    </div>
                </div>
            </div>
            , new DialogOptions() { Width = "400px" });

        if (result != null && result == true)
        {
            var response = await TagService.Delete(id);
            if (response)
            {
                Message = "tag deleted";
            }
            await GetFiltredTags(PageParametrs.CurrentPage);
        }
    }

    private void GotoEdit(Guid id)
    {
        NavigationManager.NavigateTo($"/Tag/Edit/{id}");
    }

}