@page "/Article/{Slug}"
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject IPostService PostService 
@inject ILogger<Preview> Logger
@attribute [Authorize]

<div class="content col-lg-9 ">
    <MessageBox Message="@Message"></MessageBox>
</div>
<div class="d-flex col-lg-9 justify-content-evenly pb-3">
    <button type="button" class="btn btn-md btn-outline-primary" @onclick="GoToEditArticle">Редактировать </button>
    <button type="button" class="btn btn-md btn-outline-success" @onclick="PublishedArticle">Опубликовать</button>
    <button type="button" class="btn btn-md btn-outline-danger" @onclick="DeleteArticle">Удалить </button>
</div>
<div class="content col-lg-9 justify-content-between d-flex">
    <span class="fs-5 text-dark">
        Publication status:
        @if (Article != null)
        {
            <span class="@PublishCssColor(Article.IsPublished)">@Article.IsPublished.ToString()</span>
        }
    </span>
    <span class="fs-5">ID: @Article?.Id</span>
</div>
<hr>
<div class="content col-lg-9 ">
    @if (Article != null)
    {
        <h2 class="fs-1">@Article.Title</h2>
        <div id="data-content"class="d-flex justify-content-between py-3">
            <div>Создано: <em>@Article.DateCreated.ToString("f")</em></div>
            <div>Обновлено: <em>@Article.DateCreated.ToString("f")</em></div>
        </div>
        <div id="content">
            @((MarkupString)Article.Content)
        </div>
        <hr>
        <div class="tags c-pointer">
            @foreach (var tag in Article.Tags)
            {
                <span class="badge bg-success position-relative p-2 me-2 mb-1">@tag</span>
            }
        </div>
    }
</div>

@code {
    private string? Message { get; set; }

    [Parameter]
    public string? Slug { get; set; }

    private ArticleFullViewModel? Article { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetArticle();
        throw new Exception();
    }

    private async Task GetArticle()
    {
        try
        {
            var art = await PostService?.GetPostBySlug(Slug);
            Article = new(art);
        }
        catch (Exception e)
        {
            Logger.LogError($"Failed to load {NavigationManager.Uri}. Date: {DateTime.Now}. Error: {e.Message}");
            Message = e.Message;
        }
    }

    private void GoToEditArticle()
    {
        NavigationManager.NavigateTo($"Article/Edit/{Article.Id}");
    }

    private async Task PublishedArticle()
    {
        bool published = Article != null && (Article.IsPublished ? false : true);
        try
        {
            await PostService.PublishPost(Article.Id, published);
            await GetArticle();
            Message = Article.IsPublished ? "Статья Опубликована" : Message = "Статья Отозвана";
        }
        catch (Exception e)
        {
            Logger.LogError($"Failed to publish {Article.Id}. Date: {DateTime.Now}. Error: {e.Message}");
            Message = e.Message;
        }
    }

    private async Task DeleteArticle()
    {
        var result = await DialogService.OpenAsync("Подтвердите действие.", ds =>
            @<div>
                <p class="fw-bolder">Вы дейтвительно хотите удалить данную статью?</p>
                <div class="row">
                    <div class="col-sm-12 justify-content-between d-flex">
                        <button class="btn btn-md btn-danger" type="button" @onclick="() => ds.Close(true)">Подтвердить</button>
                        <button class="btn btn-md btn-primary" type="button" @onclick="() => ds.Close(false)">Отмена</button>
                    </div>
                </div>
            </div>
            , new DialogOptions() { Width = "400px" });

        if (result != null && result == true)
        {
            try
            {
                await PostService.Delete(Article.Id);
                NavigationManager.NavigateTo("/Articles");
            }
            catch (Exception e)
            {
                Logger.LogError($"Failed to delete {typeof(Post)} id {Article.Id}. Date: {DateTime.Now}. Error: {e.Message}");
                Message = e.Message;
            }
        }
    }

    private static string PublishCssColor(bool isPublished)
    {
        return isPublished ? "text-success" : "text-danger";
    }

}