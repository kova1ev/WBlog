@page "/Articles"
@inject NavigationManager NavigationManager
@inject IPostService PostService
@inject ILogger<Articles> Logger
@attribute [Authorize]

<NavMenu></NavMenu>
<div class="col-lg-10">
    <MessageBox Message="@Message"></MessageBox>
    <div>
        <h2>Статьи</h2>
        <div class="d-flex">
            <input class="form-control me-2" type="text" placeholder="Поиск" @bind="@SearchString" @bind:event="oninput"
                @onkeydown="KeyPush">
            <button class="btn btn-outline-success" type="button" @onclick="@(async () => await GetFiltredPosts())">
                Поиск
            </button>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th class="col-10" scope="col">Название</th>
                <th class="col" scope="col">Опубликовано</th>
                <th class="col" scope="col">Дата @SortArrowHtml()</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in PostsData.Data)
            {
                <tr class="post">
                    <td>
                        <span class="text-body fw-normal c-pointer" @onclick="@(() => OpenArticle(post.Slug))">
                            @post.Title
                        </span>
                    </td>
                    <td class="text-center @PublishCssColor(post.IsPublished)">@Publish(post.IsPublished) </td>
                    <td>
                        <span class="text-body"> @post.DateCreated.ToShortDateString()</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <PageBar PageParam="@PageParameters" OnClickCallback="@GetFiltredPosts"></PageBar>
</div>

@code {

    private string? Message { get; set; }
    private FilteredData<ArticleIndexModel> PostsData { get; set; } = new();

    private PageParameters PageParameters { get; } = new();
    private SortState DateSort { get; set; } = SortState.DateDesc;
    private string? SearchString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetFiltredPosts(PageParameters.CurrentPage);
    }

    private async Task GetFiltredPosts(int page = 1)
    {
        PageParameters.CurrentPage = page;

        ArticleRequestOptions articleRequestOptions = new()
        {
            OffSet = (PageParameters.CurrentPage - 1) * PageParameters.ItemPerPage,
            Query = SearchString,
            Limit = PageParameters.ItemPerPage,
            State = DateSort
        };
        try
        {
            var articles = await PostService.GetPostsAsync(articleRequestOptions);

            PostsData.Data = articles.Data.Select(art => new ArticleIndexModel(art));
            PageParameters.TotalItems = articles.TotalItems;
        }
        catch (Exception e)
        {
            Logger.LogError($"Failed to load {NavigationManager.Uri}. Date: {DateTime.Now}. Error: {e.Message}");
            Message = e.Message;
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Message = String.Empty;
        return base.OnAfterRenderAsync(firstRender);
    }

    private void OpenArticle(string slug)
    {
        NavigationManager.NavigateTo($"/Article/{slug}");
    }

    private async Task KeyPush(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await GetFiltredPosts();
        }
    }


    private RenderFragment SortArrowHtml()
    {
        if (DateSort == SortState.DateDesc)
        {
            return
    @<i class="bi bi-caret-down-fill c-pointer" @onclick="@SortByDataClick"></i>
    ;
        }
        else
        {
            return
    @<i class="bi bi-caret-up-fill c-pointer" @onclick="@SortByDataClick"></i>
    ;
        }
    }

    async Task SortByDataClick()
    {
        DateSort = DateSort == SortState.DateDesc ? SortState.DateAsc : SortState.DateDesc;
        await GetFiltredPosts(PageParameters.CurrentPage);
    }

    @* Publish *@

    private static string Publish(bool isPublished)
    {
        return isPublished ? "Yes" : "No";
    }

    private static string PublishCssColor(bool isPublished)
    {
        return isPublished ? "text-success" : "text-danger";
    }

}