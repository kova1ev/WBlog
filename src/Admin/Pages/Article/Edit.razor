@page "/Article/Edit"
@page "/Article/Edit/{Id:guid?}"
@inject NavigationManager NavigationManager
@inject IPostService PostService
@inject ILogger<Edit> Logger
@attribute [Authorize]

@if (Id == default)
{
    <div class="row justify-content-center mb-3 mt-3">
        <h3 class="text-center">Создайте новый пост</h3>
    </div>
}
else
{
    <div class="row justify-content-center mb-3 mt-3">
        <h3 class="text-center">Отредактируйте пост</h3>
    </div>
}
<MessageBox Message="@Message"></MessageBox>
<div class="d-flex content col-lg-9 justify-content-center pb-2">
    <EditForm class="row" method="post" enctype="multipart/form-data" Model="ArticleEditModel" OnValidSubmit="Send">
        <DataAnnotationsValidator/>
        <ValidationSummary></ValidationSummary>
        @* Title *@
        <div class="mb-3">
            <label class="form-label ms-2 fw-bolder">Название статьи</label>
            <ValidationMessage For="() => ArticleEditModel!.Title"/>
            <InputText id="title" class="form-control" placeholder="Название статьи" @bind-Value="ArticleEditModel.Title"/>
        </div>
        @* Slug *@
        <div class="mb-3">
            <label class="form-label ms-2 fw-bolder">Slug статьи</label>
            <ValidationMessage For="() => ArticleEditModel!.Slug"/>
            <InputText id="slug" class="form-control" placeholder="slug статьи" @bind-Value="ArticleEditModel.Slug"/>
            <div class="form-text">
                slug must contain only letters of the Latin alphabet , numbers, dashes and spaces.
            </div>
        </div>
        @* Image *@

        @* <div class="d-flex justify-content-between mb-3">
            <div class="col-md-4">
            <label class="form-label ms-2 fw-bolder">Image Cover</label>
            <input class="form-control " type="file" name="Image">
            </div>
            <div class="img-box col-md-4">
            <img class="img-thumbnail" src="images/love.jpg" alt="pic" style="width: 100%;">
            </div>
            </div> *@
        @* Tags *@
        <div class="mb-3">
            <label class="form-label ms-2 fw-bolder">Теги</label>
            @* TODO Display ValidationMessage for Tags *@
            <ValidationMessage For="() => ArticleEditModel!.Tags"/>
            <div class="d-flex mb-3">
                <input id="tagInput" class="form-control me-2" @bind="@InputTag" @onkeydown="PressEnter"/>
                <button type="button" class="btn btn-outline-primary" @onclick="AddTag">Добавить</button>
            </div>
            @if (ArticleEditModel?.Tags != null && ArticleEditModel.Tags.Any())
            {
                foreach (var item in ArticleEditModel.Tags)
                {
                    <span class="badge bg-success position-relative p-2 me-2 mb-1">
                        @item
                        <span type="button" @onclick="@(() => RemoveTag(item))"
                              class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            X
                        </span>
                    </span>
                }
            }
            else
            {
                <span>добавьте #тег</span>
            }
        </div>
        @* Description *@
        <div class="mb-3">
            <label class="form-label ms-2 fw-bolder">Описание</label>
            <ValidationMessage For="() => ArticleEditModel!.Description"/>
            <InputTextArea id="descritpion" class="form-control" placeholder="Описание статьи" cols="30" rows="10" @bind-Value="ArticleEditModel.Description">
            </InputTextArea>
        </div>
        @* Content *@
        <div class="mb-4">
            <label class="from-label ms-2 fw-bolder">Контент</label>
            <ValidationMessage For="() => ArticleEditModel!.Content"/>
            <RadzenHtmlEditor @bind-Value="@ArticleEditModel.Content" cols="30" rows="10">
            </RadzenHtmlEditor>
        </div>
        @* save button *@
        <hr>
        <div class="mb-3 d-flex justify-content-between pb-2">
            <div class="form-check">
                <InputCheckbox class="form-check-input" @bind-Value="ArticleEditModel.IsPublished"/>
                <label class="form-check-label fw-bolder">Опубликовать</label>
            </div>
            <button type="submit" class="btn btn-md btn-outline-success">Сохранить</button>
        </div>
    </EditForm>
</div>

@code
{
    private string? Message { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    private string InputTag { get; set; } = String.Empty;

    private ArticleEditModel? ArticleEditModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != default)
        {
            await GetArticleAsync();
        }
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        ArticleEditModel = new ArticleEditModel();
        return base.SetParametersAsync(parameters);
    }

    private async Task GetArticleAsync()
    {
        try
        {
            var art = await PostService.GetPostById(Id);
            ArticleEditModel = new(art);
        }
        catch (Exception e)
        {
            Logger.LogError($"Failed to load {typeof(Post)} id {Id}. Date: {DateTime.Now}. Error: {e.Message}");
            Message = e.Message;
        }
    }

    private void AddTag()
    {
        if (string.IsNullOrWhiteSpace(InputTag) == false)
        {
            ArticleEditModel.Tags.Add(InputTag);
        }
        InputTag = string.Empty;
    }

    private void RemoveTag(string value)
    {
        ArticleEditModel.Tags.Remove(value);
    }

    private void PressEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddTag();
        }
    }

    private async Task Send()
    {
        try
        {
            if (Id != default)
            {
                await PostService.UpdateAsync(ArticleEditModel.ToPost());
            }
            else
            {
                await PostService.Save(ArticleEditModel.ToPost());
            }
            NavigationManager.NavigateTo($"/Article/{ArticleEditModel.Slug}",true);
        }
        catch (Exception e)
        {
            Logger.LogError($"Failed to Save {typeof(Post)} id {Id}. Date: {DateTime.Now}. Error: {e.Message}");
            Message = e.Message;
        }
    }
}