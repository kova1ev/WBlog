@page "/Account/Login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Admin.Service
@inject IAdminService AdminService
@inject ITagService TagService
@inject NavigationManager NavigationManager
@inject WBlog.Infrastructure.Data.UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [AllowAnonymous]

<div>
    <p class="h1 text-center">Admin</p>
</div>
<div class="container">
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger" role="alert">
            <span>@Message</span>
        </div>
    }
    <div class="container d-flex justify-content-center py-5">
        <EditForm class="row col-5" method="post" Model="LoginModel" OnValidSubmit="Authentication">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <ValidationMessage For="() => LoginModel.Email"></ValidationMessage>
                <InputText type="email" class="form-control" @bind-Value="LoginModel.Email" name="email" id="email" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => LoginModel.Email"></ValidationMessage>
                <InputText type="password" class="form-control" @bind-Value="LoginModel.Password" name="password"
                           id="password" />
            </div>
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>

        </EditForm>
    </div>
</div>

@code
{
    private string Message { get; set; }
    private LoginModel LoginModel { get; set; }


    protected override Task OnParametersSetAsync()
    {
        LoginModel = new();
        return base.OnParametersSetAsync();
    }

    private async Task Authentication()
    {
        WBlog.Infrastructure.Data.User? user = UserService.GetUser(LoginModel.Email!);
        if (user == null || LoginModel.Password != user.Password)
        {

            Message = "Invalid password or login";
        }


         var authenticationStateProviderService = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
       // CustomAuthenticationStateProvider authenticationStateProviderService = new ();
        var userSession = new UserSession
        {
            UserName = user.Email,
            Role = user.Role
        };

        await authenticationStateProviderService.UpadeAuthenticationState(userSession);

        NavigationManager.NavigateTo("/", true);


        <!--string salt = "MySalt";
        var loginAdmin = new Core.Domain.Login { Email = LoginModel.Email, Password = LoginModel.Password };
        bool result = await AdminService.Validation(loginAdmin, salt);
        if (result != false)
        {

            var claims = new List<Claim> { new Claim(ClaimTypes.Name, loginAdmin.Email!) };
            ClaimsIdentity claimsIdentity = new ClaimsIdentity(claims, "WCookies");-->

            @*await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,*@
            @*new ClaimsPrincipal(claimsIdentity));*@

            <!--NavigationManager.NavigateTo("/", true);
        }

        Message = "Invalid password or login";-->
    }
}