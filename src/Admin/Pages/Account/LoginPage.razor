@page "/Account/Login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@using Admin.Service
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager

@attribute [AllowAnonymous]

<div>
    <p class="h1 text-center">Admin</p>
</div>
<div class="container">
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger" role="alert">
            <span>@Message</span>
        </div>
    }
    <div class="container d-flex justify-content-center py-5">
        <EditForm class="row col-5" method="post" Model="LoginModel" OnValidSubmit="Authentication">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <ValidationMessage For="() => LoginModel.Email"></ValidationMessage>
                <InputText type="email" class="form-control" @bind-Value="LoginModel.Email" name="email" id="email" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => LoginModel.Email"></ValidationMessage>
                <InputText type="password" class="form-control" @bind-Value="LoginModel.Password" name="password"
                    id="password" />
            </div>
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    </div>
    <div class="d-flex justify-content-center">
        <a href="/swagger/index.html"> Explore Api</a>
    </div>
</div>

@code
{
    private string? Message { get; set; }
    private LoginModel? LoginModel { get; set; }


    protected override Task OnParametersSetAsync()
    {
        LoginModel = new();
        return base.OnParametersSetAsync();
    }

    private async Task Authentication()
    {
        var validationPasswordResult = await UserService.ValidationAsync(LoginModel.ToLogin());

        if (validationPasswordResult == false)
        {

            Message = "Invalid password or login";
            return;
        }
        IdentityUser user = await UserService.GetUserByEmailAsync(LoginModel.Email!);

        var authenticationStateProviderService = (CustomAuthenticationStateProvider)AuthenticationStateProvider;

        var userSession = UserSession.CreateUserSession(user);

        await authenticationStateProviderService.UpdateAuthenticationState(userSession);

        NavigationManager.NavigateTo("/", true);

    }


}