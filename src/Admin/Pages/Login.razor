@page "/Login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IAdminService AdminService

<div class="container">
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-danger" role="alert">
            <span>@Message</span>
        </div>
    }
    <div class="container d-flex justify-content-center py-5">
        <EditForm method="post" Model="LoginModel" OnInvalidSubmit="Auth">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="row mb-3">
                <label for="email" class="form-label">Email address</label>
                <ValidationMessage For="@(() => LoginModel.Email)"></ValidationMessage>
                <input type="text" class="form-control" @bind="LoginModel.Email" name="email" id="email">
            </div>
            <div class="row mb-3">
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="@(() => LoginModel.Email)"></ValidationMessage>
                <input type="text" class="form-control" @bind="LoginModel.Password" name="password" id="password">
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code
{
    private string Message { get; set; }
    private LoginModel LoginModel { get; set; }

    private async void Auth()
    {
        string salt = "MySalt";
        var loginAdmin = new Core.Domain.Login{ Email = LoginModel.Email, Password = LoginModel.Password };
        bool result = await AdminService.Validation(loginAdmin, salt);
        if (result == false)
            Message = "Invalid password or login";


        var claims = new List<Claim> { new Claim(ClaimTypes.Name, loginAdmin.Email!) };
        ClaimsIdentity claimsIdentity = new ClaimsIdentity(claims, "WCookies");
        
        await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme,
            new ClaimsPrincipal(claimsIdentity));

    }
}