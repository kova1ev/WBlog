@page "/Tag/Edit/{Id:guid?}"
@inject NavigationManager NavigationManager

<SideMenu></SideMenu>
<div class="col-lg-10">
    @if (!string.IsNullOrWhiteSpace(Message))
    {
        <p class="text-danger">@Message</p>
    }
    @if (Tag != null)
    {
        <div class="d-flex mb-2">
            <h4>
                <span class="fs-5">Текущие название: </span>@TagName
            </h4>
        </div>
        <EditForm class="" Model="Tag" OnValidSubmit="Update">
            <DataAnnotationsValidator/>
            <label for="name" class="from-label mb-2">Новое название</label>
            <InputText id="name" class="form-control mb-2" @bind-Value="Tag.Name"/>
            <ValidationMessage For="() => Tag.Name"/>
            <div class="mt-2 d-flex justify-content-between">
                <button class="btn btn-md btn-outline-success " type="submit">Сохранить</button>
                <button class="btn btn-md btn-outline-primary " type="button" @onclick="BackToTable">Назад</button>
            </div>
        </EditForm>
    }
</div>


@code {
    private string? Message { get; set; }

    [Inject]
    public IBlogClient BlogClient { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    private TagModel? Tag { get; set; }
    private string? TagName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != default)
        {
            await GetTag();
        }
    }

    private async Task GetTag()
    {
        try
        {
            Tag = await BlogClient.GetAsync<TagModel>($"/api/tag/{Id}");
            TagName = Tag.Name;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            Message = "Тег не найден.";
        }
        catch (HttpRequestException ex)
        {
            Message = ex.Message;
        }
    }

    private async Task Update()
    {
        try
        {
            await BlogClient.PutAsync<TagModel>("api/tag", Tag);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Conflict)
        {
            Message = $"Тег с таким именем \"{Tag?.Name}\" уже существует.";
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            await GetTag();
        }
    }

    private void BackToTable()
    {
        NavigationManager.NavigateTo("/admin/Tags");
    }

}